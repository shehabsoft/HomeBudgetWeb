package com.views;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.xml.rpc.ServiceException;
import javax.xml.ws.Action;

import com.TransactionService;
import com.TransactionServiceProxy;
import com.TransactionServiceService;
import com.TransactionServiceServiceLocator;
import com.TransactionServiceSoapBindingStub;
import com.dataObjects.CategoryVO;
import com.dataObjects.CountryVO;
import com.dataObjects.CurrencyVO;
import com.dataObjects.LocationVO;
import com.dataObjects.PurchaseVO;
import com.dataObjects.StatusVO;
import com.google.gson.Gson;
import com.models.Documents.CategoriesKeyBasedDocument;
import com.models.Documents.CountriesKeyBasedDocument;
import com.models.Documents.CurrenciesKeyBasedDocument;
import com.models.Documents.LocationKeyBasedDocument;
import com.models.Documents.PurchasesKeyBasedDocument;
import com.models.Documents.StatusKeyBasedDocument;

import util.BusinessException;
import util.TransactionServiceParser;

@ManagedBean
@SessionScoped
public class UserView {


	public List<CurrencyVO> getCurrencyList() {
		return currencyList;
	}

	public void setCurrencyList(List<CurrencyVO> currencyList) {
		this.currencyList = currencyList;
	}

	public ArrayList<CountryVO> getCountryList() {
		return countryList;
	}

	public void setCountryList(ArrayList<CountryVO> countryList) {
		this.countryList = countryList;
	}

	private String name;
	private String email;
	private String address;
	private String password;
	private String rePassword;
	private String emailExitMessage;


	private int statusId;
	private int currencyId;
	private int countryId;
	public int getCountryId() {
		return countryId;
	}

	public void setCountryId(int countryId) {
		this.countryId = countryId;
	}
    private boolean emailExit=false;
	private int genderId;
	private int mobile_number;
	
	private List<CurrencyVO> currencyList=new ArrayList<CurrencyVO>();
    private ArrayList<CountryVO> countryList=new ArrayList<CountryVO>();
	

	public UserView() throws Exception
	{
		currencyList=getAllCurrencies();
		for(CurrencyVO currencyVO:currencyList)
		{
			currencyMap.put(currencyVO.getName(),currencyVO.getId()); //label, value
		}
		
		countryList=getAllCountries();
		for(CountryVO countryVO:countryList)
		{
			countryMap.put(countryVO.getEnglishName(),countryVO.getId()); //label, value
		}
		emailExit=false;
	}

	private Boolean status;
	

	private  ArrayList<CategoryVO> categoryVOs;
	//Generated by Map
	private Map<String,Object> currencyMap=new LinkedHashMap<String,Object>();
	private Map<String,Object> countryMap=new LinkedHashMap<String,Object>();

	
	public Map<String,Object> getCategoryList() {
		return currencyMap;
	}
	
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getRePassword() {
		return rePassword;
	}
	public void setRePassword(String rePassword) {
		this.rePassword = rePassword;
	}
	
	public void setCategoryList(Map<String, Object> categoryList) {
		this.currencyMap = categoryList;
	}
	
	public String message="Start Transaction..........";
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	
	@Action
	public void add() throws BusinessException
	{
	
	
		String content="";
		String responseMessage="";
		
		
	
		try {
			TransactionService transactionService=null;
			TransactionServiceServiceLocator  serviceServiceLocator=new TransactionServiceServiceLocator();
			try {
				 transactionService=	serviceServiceLocator.getTransactionService();
				
			} catch (ServiceException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		String response=	transactionService.createTransaction("<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\" ?><createTransaction><serviceCode>5</serviceCode><name>"+getName()+"</name><password>"+getPassword()+"</password><email>"+getEmail()+"</email><address>"+getAddress()+"</address><currencyId>"+getCurrencyId()+"</currencyId><countryId>"+getCountryId()+"</countryId><genderId>"+getGenderId()+"</genderId><statusId>"+getStatusId()+"</statusId><mobileNumber>"+getMobile_number()+"</mobileNumber></createTransaction>]]>");
		TransactionServiceParser transactionServiceParser=new  TransactionServiceParser();
		responseMessage=transactionServiceParser.parseCreateTransactionResponse(response);
		
		System.out.print(responseMessage);	
		 
		status=true;
		} catch (Exception e) {
			// TODO Auto-generated catch block	
			status=false;
			
			if(e instanceof BusinessException)
			{
				System.out.println(e);
				throw new BusinessException(e.toString());
			}
			
			
		
		}finally
		{
			if(!status)
			{
				message="Error";
			}
			
		}
		
		message= responseMessage;
		reset();
	}
	public void reset()
	{
		setName("");
		setEmail("");
		setAddress("");
		setMobile_number(0);
		setPassword("");
		setRePassword("");
		
		
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public int getStatusId() {
		return statusId;
	}
	public void setStatusId(int statusId) {
		this.statusId = statusId;
	}
	public int getCurrencyId() {
		return currencyId;
	}
	public void setCurrencyId(int currencyId) {
		this.currencyId = currencyId;
	}
	public int getGenderId() {
		return genderId;
	}
	public void setGenderId(int genderId) {
		this.genderId = genderId;
	}
	public int getMobile_number() {
		return mobile_number;
	}
	public void setMobile_number(int mobile_number) {
		this.mobile_number = mobile_number;
	}
	public Boolean getStatus() {
		return status;
	}
	public void setStatus(Boolean status) {
		this.status = status;
	}
	public void refesh() throws Exception
	{
		this.currencyList=getAllCurrencies();
	}
	public ArrayList<CurrencyVO> getAllCurrencies() throws Exception
	{
		try {
			String serviceUrl = "http://localhost:8080/WebServices/getData" + "/" + "GetAllCurrencies";
			URL url = new URL(serviceUrl);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			Gson gson2 = new Gson();
			// String body="objectName="+className;

			conn.setRequestMethod("GET");
			conn.setRequestProperty("Content-Type", "application/json");
			conn.setDoOutput(true);
		    conn.setUseCaches(false);
		    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
		    String output = "";
		    output = br.readLine();
		    Object obj = gson2.fromJson(output, CurrenciesKeyBasedDocument.class);
		    CurrenciesKeyBasedDocument currenciesKeyBasedDocument=(CurrenciesKeyBasedDocument)obj;
		    ArrayList<CurrencyVO>currenciesVos=(ArrayList<CurrencyVO>)currenciesKeyBasedDocument.getCurrencyVO();
		    return currenciesVos;

	}catch(Exception e)
		
		{
		   throw new Exception(e);
		}
		}
	public ArrayList<CountryVO> getAllCountries() throws Exception
	{
		try {

			
			String serviceUrl = "http://localhost:8080/WebServices/getData" + "/" + "getAllCountries";
			URL url = new URL(serviceUrl);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			Gson gson2 = new Gson();
			// String body="objectName="+className;	

			conn.setRequestMethod("GET");
			conn.setRequestProperty("Content-Type", "application/json");
			conn.setDoOutput(true);
		    conn.setUseCaches(false);
		    BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(),"UTF-8"));
		    String output = "";
		    output = br.readLine();
		    Object obj = gson2.fromJson(output, CountriesKeyBasedDocument.class);
		    CountriesKeyBasedDocument countriesKeyBasedDocument=(CountriesKeyBasedDocument)obj;
		    ArrayList<CountryVO>locationsVOs=(ArrayList<CountryVO>)countriesKeyBasedDocument.getCountryVO();
		    return locationsVOs;

	}catch(Exception e)
		
		{
		   throw new Exception(e);
		}
		}

	@Action
	public void checkEmail() throws IOException
	{
		String serviceUrl = "http://localhost:8080/WebServices/getData" + "/" + "checkEmail";
		URL url = new URL(serviceUrl);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		Gson gson2 = new Gson();
		String mail="mail="+getEmail();
		conn.setRequestMethod("POST");
		conn.setRequestProperty("Content-Type", "application/json");
		conn.setRequestProperty("email", getEmail());

		conn.setDoOutput(true);
		conn.setUseCaches(false);

		byte[] bytes = mail.getBytes();
		OutputStream out = conn.getOutputStream();
		out.write(bytes);
		if (conn.getResponseCode() != 200) {

			throw new RuntimeException("Failed : HTTP error code : "
					+ conn.getResponseCode());
		}
		BufferedReader br = new BufferedReader(new InputStreamReader(
				(conn.getInputStream())));
		String output = "";
		System.out.println("Output from Server .... \n");
		output = br.readLine();
	    Object obj = gson2.fromJson(output, StatusKeyBasedDocument.class);
	    StatusKeyBasedDocument statusKeyBasedDocument=(StatusKeyBasedDocument)obj;
	    StatusVO statusVO=(StatusVO)statusKeyBasedDocument.getStatusVO();
	    if(statusVO.isFlage()==true)
	    {
	    	emailExit=true;
	    	emailExitMessage="This Mail Exit In System";
	    }else
	    {
	    	emailExit=false;
	    	emailExitMessage="Good Mail";
	    }
	    
	}

	public boolean getEmailExit() {
		return emailExit;
	}

	public void setEmailExit(boolean emailCheck) {
		this.emailExit = emailCheck;
	}
	public String getEmailExitMessage() {
		return emailExitMessage;
	}

	public void setEmailExitMessage(String emailExitMessage) {
		this.emailExitMessage = emailExitMessage;
	}
	
}
