package com.views;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.xml.rpc.ServiceException;
import javax.xml.ws.Action;

import com.TransactionService;
import com.TransactionServiceProxy;
import com.TransactionServiceService;
import com.TransactionServiceServiceLocator;
import com.TransactionServiceSoapBindingStub;
import com.dataObjects.CategoryVO;
import com.dataObjects.Constants;
import com.dataObjects.LocationVO;
import com.dataObjects.PurchaseVO;
import com.google.gson.Gson;
import com.models.Documents.CategoriesKeyBasedDocument;
import com.models.Documents.LocationKeyBasedDocument;
import com.models.Documents.PurchasesKeyBasedDocument;

import util.BusinessException;
import util.TransactionServiceParser;

@ManagedBean
@SessionScoped
public class PurchaceView extends JSFView  {

	CategoryView categoryView=new CategoryView();
	LocationView locationView=new LocationView();
	private PurchaseVO purchaseVO;
	
	private List<PurchaseVO> purchaseList=new ArrayList<PurchaseVO>();
    private ArrayList<LocationVO> locationVOs=new ArrayList<LocationVO>();
	

	public PurchaceView() throws Exception
	{
		purchaseVO=new PurchaseVO();
		categoryVOs=(ArrayList<CategoryVO>) categoryView.getCategoryList();
		for(CategoryVO categoryVO:categoryVOs)
		{
			categoryList.put(categoryVO.getEnglishDescription(),categoryVO.getId()); //label, value
		}
		purchaseList=getAllPurchases();
		locationVOs=locationView.getLocationVOs();
		for(LocationVO categoryVO:locationVOs)
		{
			locationList.put(categoryVO.getEnglishName(),categoryVO.getId()); //label, value
		}
	}
	public Map<String, Object> getLocationList() {
		return locationList;
	}

	public void setLocationList(Map<String, Object> locationList) {
		this.locationList = locationList;
	}
	
	

	private  ArrayList<CategoryVO> categoryVOs;
	//Generated by Map
	private Map<String,Object> categoryList=new LinkedHashMap<String,Object>();
	private Map<String,Object> locationList=new LinkedHashMap<String,Object>();

	
	
	public Map<String,Object> getCategoryList() {
		return categoryList;
	}


	public PurchaseVO getPurchaseVO() {
		return purchaseVO;
	}
	public void setPurchaseVO(PurchaseVO purchaseVO) {
		this.purchaseVO = purchaseVO;
	}


	public void setCategoryList(Map<String, Object> categoryList) {
		this.categoryList = categoryList;
	}
	

	@Action
	public void getAllCategories() throws Exception
	{
		categoryVOs=categoryView.getExpensesCategories();
		for(CategoryVO categoryVO:categoryVOs)
		{
			categoryList.put(categoryVO.getEnglishDescription(),categoryVO.getId()); //label, value
		}
	}
	@Action
	public void getLocations() throws Exception
	{
		locationVOs=locationView.getAllLocations();
		for(LocationVO categoryVO:locationVOs)
		{
			locationList.put(categoryVO.getEnglishName(),categoryVO.getId()); //label, value
		}
	}
	@Action
	public void add() throws BusinessException
	{
	
		String responseMessage="";
		
		try {
		System.out.println("Calling Transaction Service Form Purchhase View");
		String requestData="<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\" ?><createTransaction><serviceCode>"+Constants.ADD_PURCHASE_SERVICE+"</serviceCode><userId>37</userId><arabicDescription>"+purchaseVO.getArabicDescription()+"</arabicDescription> <englishDescription>"+purchaseVO.getEnglishDescription()+"</englishDescription><price>"+purchaseVO.getPrice()+"</price><categoryId>"+purchaseVO.getCategoryId()+"</categoryId><locationId>"+purchaseVO.getLocationId()+"</locationId><details>"+purchaseVO.getDetails()+"</details></createTransaction>]]>";	
		System.out.println("Request Data "+requestData);
		String response=callTransactionService(requestData);
		TransactionServiceParser transactionServiceParser=new  TransactionServiceParser();
		responseMessage=transactionServiceParser.parseCreateTransactionResponse(response);
		System.out.println("response  Data "+responseMessage);
		System.out.print(responseMessage);	
		 
		setStatus(true);
		} catch (Exception e) {
			// TODO Auto-generated catch block	
			setStatus(false);
			
			if(e instanceof BusinessException)
			{
				System.out.println(e);
				throw new BusinessException(e.toString());
			}
			
			
		
		}finally
		{
			if(!getStatus())
			{
				setMessage("Error");
			}
			
		}
		
		setMessage(responseMessage);
		reset();
	}
	public void reset()
	{
		setPurchaseVO(null);
		
		
	}
	public void refesh() throws Exception
	{
		this.purchaseList=getAllPurchases();
	}
	public ArrayList<PurchaseVO> getAllPurchases() throws Exception
	{
		try {
			String output = "";
			System.out.println("CAlling GetAllPurchases  .... \n");
			output=callPostWebService("GetAllPurchases");
			System.out.println("Output From Server  .... "+output);
			System.out.println(" .... \n");
			Gson gson=new Gson();
		    Object obj = gson.fromJson(output, PurchasesKeyBasedDocument.class);
		    PurchasesKeyBasedDocument purchasesKeyBasedDocument=(PurchasesKeyBasedDocument)obj;
		    ArrayList<PurchaseVO>purchaseVos=(ArrayList<PurchaseVO>)purchasesKeyBasedDocument.getPurchaseVO();
		    return purchaseVos;

	}catch(Exception e)
		
		{
		   throw new Exception(e);
		}
		}


	public List<PurchaseVO> getPurchaseList() {
		return purchaseList;
	}

	public void setPurchaseList(List<PurchaseVO> purchaseList) {
		this.purchaseList = purchaseList;
	}
	
}
