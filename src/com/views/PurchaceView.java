package com.views;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.xml.ws.Action;

import com.dataObjects.CategoryVO;
import com.dataObjects.Constants;
import com.dataObjects.LocationVO;
import com.dataObjects.PurchaseHistoryVO;
import com.dataObjects.PurchaseVO;
import com.google.gson.Gson;
import com.models.Documents.PurchaseHistoryKeyBasedDocument;
import com.models.Documents.PurchasesKeyBasedDocument;

import util.BusinessException;
import util.TransactionServiceParser;

@ManagedBean(name = "purchaceView")
@SessionScoped
public class PurchaceView extends JSFView {

	CategoryView categoryView = new CategoryView();
	LocationView locationView = new LocationView();
	private PurchaseVO purchaseVO;
	private int selectedCategoryId;
	//for purchase History Chart 
	private String creationDateStr;
	private String  totalPriceStr;
	private double purchaseTotalValue;
	private double purchaseAvergeValue;
	private String purchaseEnName;

	private List<PurchaseVO> purchaseList = new ArrayList<PurchaseVO>();
	private List<PurchaseVO> unApprovedPurchaseList = new ArrayList<PurchaseVO>();
	private PurchaseVO purchaseHistoryChart = new PurchaseVO();
	private List<PurchaseHistoryVO> purchaseHistoryList = new ArrayList<PurchaseHistoryVO>();
	private ArrayList<LocationVO> locationVOs = new ArrayList<LocationVO>();
 
 


	public PurchaceView() throws Exception {

		if(getUserVO()==null)
			return;
		purchaseVO = new PurchaseVO();
		categoryVOs = (ArrayList<CategoryVO>) categoryView.getCategoryList();
		for (CategoryVO categoryVO : categoryVOs) {
			categoryList.put(categoryVO.getEnglishDescription(), categoryVO.getId()); // label,
																						// value
		}
		locationVOs = locationView.getLocationVOs();
		for (LocationVO categoryVO : locationVOs) {
			locationList.put(categoryVO.getEnglishName(), categoryVO.getId()); // label,
																				// value
		}
		 
	}

	public Map<String, Object> getLocationList() {
		return locationList;
	}

	public void setLocationList(Map<String, Object> locationList) {
		this.locationList = locationList;
	}

	private ArrayList<CategoryVO> categoryVOs;
	// Generated by Map
	private Map<String, Object> categoryList = new LinkedHashMap<String, Object>();
	private Map<String, Object> locationList = new LinkedHashMap<String, Object>();

	public Map<String, Object> getCategoryList() {
		return categoryList;
	}

	public PurchaseVO getPurchaseVO() {
		return purchaseVO;
	}

	public void setPurchaseVO(PurchaseVO purchaseVO) {
		this.purchaseVO = purchaseVO;
	}

	public void setCategoryList(Map<String, Object> categoryList) {
		this.categoryList = categoryList;
	}

	public List<PurchaseHistoryVO> getPurchaseHistoryList() {
		return purchaseHistoryList;
	}

	public void setPurchaseHistoryList(List<PurchaseHistoryVO> purchaseHistoryList) {
		this.purchaseHistoryList = purchaseHistoryList;
	}

	@Action
	public void getAllCategories() throws Exception {
		categoryVOs = categoryView.getExpensesCategories();
		for (CategoryVO categoryVO : categoryVOs) {
			categoryList.put(categoryVO.getEnglishDescription(), categoryVO.getId()); // label,
																						// value
		}
	}

	@Action
	public void getLocations() throws Exception {
		locationVOs = locationView.getAllLocations();
		for (LocationVO categoryVO : locationVOs) {
			locationList.put(categoryVO.getEnglishName(), categoryVO.getId()); // label,
																				// value
		}
	}

	@Action
	public void add() throws BusinessException {
		String responseMessage = "";
		try {
			System.out.println("Calling Transaction Service Form Purchhase View");
			String requestData = "<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\" ?><createTransaction><serviceCode>"
					+ Constants.ADD_PURCHASE_SERVICE + "</serviceCode><userId>" + getUserVO().getId()
					+ "</userId><arabicDescription>" + purchaseVO.getArabicDescription()
					+ "</arabicDescription> <englishDescription>" + purchaseVO.getEnglishDescription()
					+ "</englishDescription><price>" + purchaseVO.getPrice() + "</price><categoryId>"
					+ purchaseVO.getCategoryId() + "</categoryId><locationId>" + purchaseVO.getLocationId()
					+ "</locationId><details>" + purchaseVO.getDetails() + "</details></createTransaction>]]>";
			System.out.println("Request Data " + requestData);
			String response = callTransactionService(requestData);
			TransactionServiceParser transactionServiceParser = new TransactionServiceParser();
			responseMessage = transactionServiceParser.parseCreateTransactionResponse(response);
			System.out.println("response  Data " + responseMessage);
			System.out.print(responseMessage);

			setStatus(true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			setStatus(false);

			if (e instanceof BusinessException) {
				System.out.println(e);
				throw new BusinessException(e.toString());
			}
		} finally {
			if (!getStatus()) {
				setMessage("Error");
			}

		}

		setMessage(responseMessage);
		reset();
	}
	@Action
	public void approve() throws BusinessException {
		String responseMessage = "";
		try {
			System.out.println("Calling Transaction Service Form Purchhase View");
			String requestData = "<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\" ?><createTransaction><serviceCode>"
					+ Constants.APPROVE_PURCHASE_SERVICE + "</serviceCode><userId>" + getUserVO().getId()
					+ "</userId><purchaseId>" + purchaseVO.getId() + "</purchaseId><arabicDescription>" + purchaseVO.getArabicDescription()
					+ "</arabicDescription> <englishDescription>" + purchaseVO.getEnglishDescription()
					+ "</englishDescription><categoryId>"
					+ purchaseVO.getCategoryId() + "</categoryId><details>" + purchaseVO.getDetails() + "</details></createTransaction>]]>";
			System.out.println("Request Data " + requestData);
			String response = callTransactionService(requestData);
			TransactionServiceParser transactionServiceParser = new TransactionServiceParser();
			responseMessage = transactionServiceParser.parseCreateTransactionResponse(response);
			System.out.println("response  Data " + responseMessage);
			System.out.print(responseMessage);

			setStatus(true);
			
		//	FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
			//.handleNavigation(FacesContext.getCurrentInstance(), null, "CleansingSalesList.xhtml");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			setStatus(false);
			if (e instanceof BusinessException) {
				System.out.println(e);
				throw new BusinessException(e.toString());
			}
		} finally {
			if (!getStatus()) {
				setMessage("Error");
			}

		}
	}
		@Action
		public void reject(ActionEvent event) throws BusinessException {
			String responseMessage = "";
			try {
				int purchaseId = (Integer) event.getComponent().getAttributes().get("purchaseId");
				System.out.println(purchaseId);
				System.out.println("Calling Transaction Service Form Purchhase View");
				String requestData = "<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\" ?><createTransaction><serviceCode>"
						+ Constants.REJECT_PURCHASE_SERVICE + "</serviceCode><userId>" + getUserVO().getId()
						+ "</userId><purchaseId>" + purchaseId + "</purchaseId><arabicDescription>" + purchaseVO.getArabicDescription()
						+ "</arabicDescription> <englishDescription>" + purchaseVO.getEnglishDescription()
						+ "</englishDescription><categoryId>"
						+ purchaseVO.getCategoryId() + "</categoryId><details>" + purchaseVO.getDetails() + "</details></createTransaction>]]>";
				System.out.println("Request Data " + requestData);
				String response = callTransactionService(requestData);
				TransactionServiceParser transactionServiceParser = new TransactionServiceParser();
				responseMessage = transactionServiceParser.parseCreateTransactionResponse(response);
				System.out.println("response  Data " + responseMessage);
				System.out.print(responseMessage);

				setStatus(true);
				
			//	FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
				//.handleNavigation(FacesContext.getCurrentInstance(), null, "CleansingSalesList.xhtml");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				setStatus(false);
				if (e instanceof BusinessException) {
					System.out.println(e);
					throw new BusinessException(e.toString());
				}
			} finally {
				if (!getStatus()) {
					setMessage("Error");
				}

			}

		setMessage(responseMessage);
		//reset();
	}

	@Action
	public void showEditPage(ActionEvent event) throws BusinessException {
		int purchaseId = (Integer) event.getComponent().getAttributes().get("purchaseId");
		System.out.println(purchaseId);
		FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
				.handleNavigation(FacesContext.getCurrentInstance(), null, "editPurchase.xhtml");
		for (PurchaseVO purchaseVo : purchaseList) {
			if (purchaseVo.getId() == purchaseId) {
				this.purchaseVO = purchaseVo;
				break;
			}
		}
	}
	@Action
	public void showApprovePage(ActionEvent event) throws BusinessException {
		int purchaseId = (Integer) event.getComponent().getAttributes().get("purchaseId");
		System.out.println(purchaseId);
		FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
				.handleNavigation(FacesContext.getCurrentInstance(), null, "approvePurchase.xhtml");
		for (PurchaseVO purchaseVo : unApprovedPurchaseList) {
			if (purchaseVo.getId() == purchaseId) {
				this.purchaseVO = purchaseVo;
				break;
			}
		}
	}

	@Action
	public void showAddPage(ActionEvent event) throws BusinessException {
		int categoryId = (Integer) event.getComponent().getAttributes().get("categoryId");
		System.out.println(categoryId);
		FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
				.handleNavigation(FacesContext.getCurrentInstance(), null, "addpurchase.xhtml");
		this.purchaseVO = new PurchaseVO();
		purchaseVO.setCategoryId(categoryId);

	}

	@Action
	public void showViewHistoryPage(ActionEvent event) throws Exception {

		int categoryId = (Integer) event.getComponent().getAttributes().get("categoryId");
		System.out.println(categoryId);
		purchaseList = getPurchasesByCategoryId(categoryId);
		FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
				.handleNavigation(FacesContext.getCurrentInstance(), null, "salesList.xhtml");

	}
	
	@Action
	public void showViewPurchaseHistoryChart(ActionEvent event) throws Exception {

		int approvedPurchaseId = (Integer) event.getComponent().getAttributes().get("approvedPurchaseId");
		System.out.println(approvedPurchaseId);
		 double total=0;
		    String actualValues[] = null;
		    purchaseTotalValue=0;
			for(PurchaseVO purchaseVO :purchaseList)
			{
				if(approvedPurchaseId==purchaseVO.getApprovedPurchaseId())
				{
					purchaseEnName=purchaseVO.getEnglishDescription();
					
					actualValues=purchaseVO.getTotalPriceStr().split(",");
					 for (String s : actualValues) {
						 purchaseTotalValue+=Double.parseDouble(s);
						}
				 
					
					break;
				}
			}
			purchaseAvergeValue=Math.ceil(purchaseTotalValue/actualValues.length);
			 
	 
	 
		

	}
	@Action
	public void showUnApprovedPurchases(ActionEvent event) throws Exception {

		int categoryId = (Integer) event.getComponent().getAttributes().get("categoryId");
		System.out.println(categoryId);
		unApprovedPurchaseList = showUnApprovedPurchases(categoryId);
		FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
				.handleNavigation(FacesContext.getCurrentInstance(), null, "CleansingSalesList.xhtml");

	}

	public List<PurchaseVO> getUnApprovedPurchaseList() {
		return unApprovedPurchaseList;
	}

	public void setUnApprovedPurchaseList(List<PurchaseVO> unApprovedPurchaseList) {
		this.unApprovedPurchaseList = unApprovedPurchaseList;
	}

	@Action
	public void showViewHistoryPurchasePage(ActionEvent event) throws Exception {

		int purchaseId = (Integer) event.getComponent().getAttributes().get("purchaseId");
		System.out.println(purchaseId);
		purchaseHistoryList = getPurchaseHistory(purchaseId);
		FacesContext.getCurrentInstance().getApplication().getNavigationHandler()
				.handleNavigation(FacesContext.getCurrentInstance(), null, "purchaseHistory.xhtml");

	}

	@Action
	public void edit() throws BusinessException {
		edit(purchaseVO);
	}

	public boolean edit(PurchaseVO selectedPurchaseVO) throws BusinessException {

		String responseMessage = "";
		try {

			System.out.println("Calling Transaction Service Form Purchhase View(Edit Purchase)");
			String requestData = "<![CDATA[<?xml version=\"1.0\" encoding=\"UTF-8\" ?><createTransaction><serviceCode>"
					+ Constants.EDIT_PURCHASE_SERVICE + "</serviceCode><userId>" + getUserVO().getId()
					+ "</userId><purchaseId>" + purchaseVO.getId() + "</purchaseId><arabicDescription>"
					+ purchaseVO.getArabicDescription() + "</arabicDescription> <englishDescription>"
					+ purchaseVO.getEnglishDescription() + "</englishDescription><price>" + purchaseVO.getPrice()
					+ "</price><newPrice>" + purchaseVO.getNewPrice() + "</newPrice><categoryId>"
					+ purchaseVO.getCategoryId() + "</categoryId><locationId>" + purchaseVO.getLocationId()
					+ "</locationId><details>" + purchaseVO.getDetails() + "</details></createTransaction>]]>";
			System.out.println("Request Data " + requestData);
			String response = callTransactionService(requestData);
			TransactionServiceParser transactionServiceParser = new TransactionServiceParser();
			responseMessage = transactionServiceParser.parseCreateTransactionResponse(response);
			System.out.println("response  Data " + responseMessage);
			System.out.print(responseMessage);
			purchaseVO.setPrice(purchaseVO.getPrice()+ purchaseVO.getNewPrice());

			setStatus(true);
			sendRedirect("/web/salesList.jsf?faces-redirect=true"); 
		} catch (Exception e) {
			// TODO Auto-generated catch block
			setStatus(false);

			if (e instanceof BusinessException) {
				System.out.println(e);
				throw new BusinessException(e.toString());
			}

		} finally {
			if (!getStatus()) {
				setMessage("Error");
			}

		}

		setMessage(responseMessage);

		return true;
	}

	public void reset() {
		if(getPurchaseVO()!=null)
		{
		getPurchaseVO().setArabicDescription("");
		getPurchaseVO().setEnglishDescription("");
		getPurchaseVO().setLocationId(0);
		getPurchaseVO().setDetails("");
		getPurchaseVO().setPrice(0);
		
		}

	}

	public void refesh() throws Exception {
		this.purchaseList = getAllPurchases();
	}

	public ArrayList<PurchaseHistoryVO> getPurchaseHistory(int purchaseId) throws Exception {
		try {
			String output = "";
			System.out.println("Calling getPurchaseHistory  .... \n");
			output = callPostWebService("getPurchaseHistory", "purchaseId", purchaseId);
			System.out.println("Output From Server  .... " + output);
			System.out.println(" .... \n");
			Gson gson = new Gson();
			Object obj = gson.fromJson(output, PurchaseHistoryKeyBasedDocument.class);
			PurchaseHistoryKeyBasedDocument purchaseHistoryKeyBasedDocument = (PurchaseHistoryKeyBasedDocument) obj;
			ArrayList<PurchaseHistoryVO> purchaseHistoryVOs = (ArrayList<PurchaseHistoryVO>) purchaseHistoryKeyBasedDocument
					.getPurchaseHistoryVO();
			return purchaseHistoryVOs;

		} catch (Exception e)

		{
			throw new Exception(e);
		}
	}

	public ArrayList<PurchaseVO> getPurchasesByCategoryId(int categoryId) throws Exception {
		try {
			String output = "";
			System.out.println("Calling getPurchasesHistery By CategoryId  .... \n");
			output = callPostWebService("getPurchasesByCategoryId", "categoryId", categoryId);
			System.out.println("Output From Server  .... " + output);
			System.out.println(" .... \n");
			Gson gson = new Gson();
			Object obj = gson.fromJson(output, PurchasesKeyBasedDocument.class);
			PurchasesKeyBasedDocument purchaseHistoryKeyBasedDocument = (PurchasesKeyBasedDocument) obj;
			ArrayList<PurchaseVO> purchaseVOs = (ArrayList<PurchaseVO>) purchaseHistoryKeyBasedDocument.getPurchaseVO();
			return purchaseVOs;

		} catch (Exception e)

		{
			throw new Exception(e);
		}
	}
	public  PurchaseVO getPurchasesHistoryChartByApprovedPurchaseId(int approvedPurchaseId) throws Exception {
		try {
			String output = "";
			System.out.println("Calling getPurchasesHistoryChartByApprovedPurchaseId  .... \n");
			output = callPostWebService("getPurchasesHistoryChartByApprovedPurchaseId", "approvedPurchaseId", approvedPurchaseId);
			System.out.println("Output From Server  .... " + output);
			System.out.println(" .... \n");
			Gson gson = new Gson();
			Object obj = gson.fromJson(output, PurchasesKeyBasedDocument.class);
			PurchasesKeyBasedDocument purchaseHistoryKeyBasedDocument = (PurchasesKeyBasedDocument) obj;
			 PurchaseVO purchaseVO = (PurchaseVO) purchaseHistoryKeyBasedDocument.getPurchaseVO();
			return purchaseVO;

		} catch (Exception e)

		{
			throw new Exception(e);
		}
	}
	public ArrayList<PurchaseVO> showUnApprovedPurchases(int categoryId) throws Exception {
		try {
			String output = "";
			System.out.println("Calling getÙ�Ù�Ù�ALLPurchasesByCategoryId  .... \n");
			selectedCategoryId=categoryId;
			output = callPostWebService("showUnApprovedPurchases", "categoryId", categoryId);
			System.out.println("Output From Server  .... " + output);
			System.out.println(" .... \n");
			Gson gson = new Gson();
			Object obj = gson.fromJson(output, PurchasesKeyBasedDocument.class);
			PurchasesKeyBasedDocument purchaseHistoryKeyBasedDocument = (PurchasesKeyBasedDocument) obj;
			ArrayList<PurchaseVO> purchaseVOs = (ArrayList<PurchaseVO>) purchaseHistoryKeyBasedDocument.getPurchaseVO();
			return purchaseVOs;

		} catch (Exception e)

		{
			throw new Exception(e);
		}
	}
	public void RefreshApprovedPurchases() throws Exception
	{
		unApprovedPurchaseList=showUnApprovedPurchases(selectedCategoryId);
	}

	public ArrayList<PurchaseVO> getAllPurchases() throws Exception {
		try {
			String output = "";
			System.out.println("CAlling GetAllPurchases  .... \n");
			output = callPostWebService("GetAllPurchases");
			System.out.println("Output From Server  .... " + output);
			System.out.println(" .... \n");
			Gson gson = new Gson();
			Object obj = gson.fromJson(output, PurchasesKeyBasedDocument.class);
			PurchasesKeyBasedDocument purchasesKeyBasedDocument = (PurchasesKeyBasedDocument) obj;
			ArrayList<PurchaseVO> purchaseVos = (ArrayList<PurchaseVO>) purchasesKeyBasedDocument.getPurchaseVO();
			return purchaseVos;

		} catch (Exception e)

		{
			throw new Exception(e);
		}
	}
	

	public List<PurchaseVO> getPurchaseList() {
		return purchaseList;
	}

	public void setPurchaseList(List<PurchaseVO> purchaseList) {
		this.purchaseList = purchaseList;
	}
	public int getSelectedCategoryId() {
		return selectedCategoryId;
	}

	public void setSelectedCategoryId(int selectedCategoryId) {
		this.selectedCategoryId = selectedCategoryId;
	}

 

	public String getCreationDateStr() {
		return creationDateStr;
	}

	public void setCreationDateStr(String creationDateStr) {
		this.creationDateStr = creationDateStr;
	}

	public String getTotalPriceStr() {
		return totalPriceStr;
	}

	public void setTotalPriceStr(String totalPriceStr) {
		this.totalPriceStr = totalPriceStr;
	}

	public double getPurchaseTotalValue() {
		return purchaseTotalValue;
	}

	public void setPurchaseTotalValue(double purchaseTotalValue) {
		this.purchaseTotalValue = purchaseTotalValue;
	}

	public double getPurchaseAvergeValue() {
		return purchaseAvergeValue;
	}

	public void setPurchaseAvergeValue(double purchaseAvergeValue) {
		this.purchaseAvergeValue = purchaseAvergeValue;
	}

	public String getPurchaseEnName() {
		return purchaseEnName;
	}

	public void setPurchaseEnName(String purchaseEnName) {
		this.purchaseEnName = purchaseEnName;
	}


}
